#if !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))
#error VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS and VFX_VARYING_UV must be defined.
#endif

${VFXPerPassInclude}
${VFXGeneratedBlockFunction}

${VFXSGAttributeMeshStruct}

#pragma vertex vert
VFX_VARYING_PS_INPUTS vert(AttributeMesh i, uint instanceID : SV_InstanceID)
{
	uint index = instanceID;
	VFX_VARYING_PS_INPUTS o = (VFX_VARYING_PS_INPUTS)0;

	${VFXLoadAttributesOrCull}
	${VFXProcessBlocks}
			
	if (!alive)
		return o;
	
	${VFXLoadSize}
	
	float4x4 elementToVFX = GetElementToVFXMatrix(axisX,axisY,axisZ,float3(angleX,angleY,angleZ),float3(pivotX,pivotY,pivotZ),size3,position);
	float3 vPos = mul(elementToVFX,float4(i.positionOS,1.0f)).xyz;

	o.VFX_VARYING_POSCS = TransformPositionVFXToClip(vPos);
    #ifdef VFX_VARYING_NORMAL
	o.VFX_VARYING_NORMAL = normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.normalOS)));
    #endif
    #ifdef VFX_VARYING_TANGENT
	o.VFX_VARYING_TANGENT = float4(normalize(TransformDirectionVFXToWorld(mul((float3x3)elementToVFX,i.tangentOS.xyz))),i.tangentOS.w);
    #endif

	${VFXVertexCommonProcess}

	${VFXVertexSetFlipbooksInterpolants}

	${VFXVertexAdditionalProcess}
			
	return o;
}

${VFXBegin:VFXComputeNormalWS}
#if USE_DOUBLE_SIDED
const float faceMul = frontFace ? 1.0f : -1.0f;
#else
const float faceMul = 1.0f;
#endif

float3 normalWS = normalize(i.VFX_VARYING_NORMAL * faceMul);
const VFXUVData uvData = GetUVData(i);

#if defined(VFX_VARYING_TANGENT) && USE_NORMAL_MAP
float3 tangentWS = normalize(i.VFX_VARYING_TANGENT.xyz);
float3 bitangentWS = cross(normalWS,tangentWS) * (i.VFX_VARYING_TANGENT.w * faceMul);
float3 n = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
float3x3 tbn = float3x3(tangentWS,bitangentWS,normalWS);
float normalScale = 1.0f;
#ifdef VFX_VARYING_NORMALSCALE
normalScale = i.VFX_VARYING_NORMALSCALE;
#endif
normalWS = normalize(lerp(normalWS,mul(n,tbn),normalScale));
#endif
${VFXEnd}

${VFXFragmentCommonFunctions}

${VFXBegin:VFXVertexAdditionalProcess}${VFXEnd}
